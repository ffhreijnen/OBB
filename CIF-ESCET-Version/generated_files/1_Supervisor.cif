uncontrollable u_r2;
uncontrollable u_r2Off;
group StopSigns:
  group Actuator:
    controllable c_on;
    controllable c_emrgOn;
    controllable c_off;
  end
  group S1:
    uncontrollable u_on;
    uncontrollable u_off;
  end
  group S2:
    uncontrollable u_on;
    uncontrollable u_off;
  end
  group S3:
    uncontrollable u_on;
    uncontrollable u_off;
  end
  group S4:
    uncontrollable u_on;
    uncontrollable u_off;
  end
  group S5:
    uncontrollable u_on;
    uncontrollable u_off;
  end
end
group SSsOnTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group BB:
  group L:
    controllable c_on;
    controllable c_emrgOn;
    controllable c_off;
  end
  group Alternate:
    controllable c_mode1;
    controllable c_mode2;
  end
end
group BB1:
  group Actuator:
    controllable c_open;
    controllable c_close;
    controllable c_stop;
    controllable c_emrgStop;
  end
  group Open:
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
  group Closed:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
  end
  group NotOpen:
    uncontrollable u_notOpen_on;
    uncontrollable u_notOpen_off;
  end
  group NotClosed:
    uncontrollable u_notClosed_on;
    uncontrollable u_notClosed_off;
  end
end
group BB2:
  group Actuator:
    controllable c_open;
    controllable c_close;
    controllable c_stop;
    controllable c_emrgStop;
  end
  group Open:
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
  group Closed:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
  end
  group NotOpen:
    uncontrollable u_notOpen_on;
    uncontrollable u_notOpen_off;
  end
  group NotClosed:
    uncontrollable u_notClosed_on;
    uncontrollable u_notClosed_off;
  end
end
group BBsOpenTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group BB1OpenTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group BB1ClosedTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group BB2OpenTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group BB2ClosedTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group VTL1:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group VTL2:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group VTL3:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group VTL4:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group VTL5:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group VTL6:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group VTL7:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group VTL8:
  group Actuator:
    controllable c_red;
    controllable c_redGreen;
    controllable c_redRed;
    controllable c_green;
    controllable c_emrg;
  end
  group Activated:
    controllable c_on;
    controllable c_off;
  end
  group Red:
    uncontrollable u_red_on;
    uncontrollable u_red_off;
  end
  group Green:
    uncontrollable u_green_on;
    uncontrollable u_green_off;
  end
  group Red2:
    uncontrollable u_red2_on;
    uncontrollable u_red2_off;
  end
end
group BR:
  group Actuator:
    controllable c_release;
    controllable c_apply;
    controllable c_emrgStop;
  end
  group Sensor:
    uncontrollable u_released;
    uncontrollable u_applied;
  end
  group Release:
    uncontrollable u_release;
    uncontrollable u_apply;
  end
end
group LM:
  group Valve:
    controllable c_lock;
    controllable c_unlock;
    controllable c_stop;
    controllable c_emrgStop;
  end
  group Pump:
    controllable c_on;
    controllable c_off;
    controllable c_emrgStop;
  end
  group Locked:
    uncontrollable u_locked_on;
    uncontrollable u_locked_off;
  end
  group Unlocked:
    uncontrollable u_unlocked_on;
    uncontrollable u_unlocked_off;
  end
end
group LMLockedTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group LMUnlockedTimer100:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group LMUnlockedTimer3:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group BD:
  group Motor:
    controllable c_on;
    controllable c_off;
    controllable c_emrgStop;
  end
  group Direction:
    controllable c_open;
    controllable c_close;
    controllable c_stop;
    controllable c_emrgStop;
  end
  group Speed:
    controllable c_stop;
    controllable c_fast;
    controllable c_slow;
    controllable c_emrgStop;
  end
  group Closed2:
    uncontrollable u_closed2_on;
    uncontrollable u_closed2_off;
  end
  group Closed:
    uncontrollable u_closed_on;
    uncontrollable u_closed_off;
  end
  group BClosed:
    uncontrollable u_bClosed_on;
    uncontrollable u_bClosed_off;
  end
  group BBClosed:
    uncontrollable u_bbClosed_on;
    uncontrollable u_bbClosed_off;
  end
  group BBOpen:
    uncontrollable u_bbOpen_on;
    uncontrollable u_bbOpen_off;
  end
  group BOpen:
    uncontrollable u_bOpen_on;
    uncontrollable u_bOpen_off;
  end
  group Open:
    uncontrollable u_open_on;
    uncontrollable u_open_off;
  end
end
group BDClosedTimer:
  controllable c_start;
  controllable c_stop;
  uncontrollable u_timeout;
end
group BridgeCommands:
  uncontrollable u_closeLT;
  uncontrollable u_openLT;
  uncontrollable u_openB;
  uncontrollable u_closeB;
  uncontrollable u_closeBB;
  uncontrollable u_stop;
  uncontrollable Done_u_closeLT;
  uncontrollable Done_u_openLT;
  uncontrollable Done_u_closeBB;
  uncontrollable Done_BarrierOpen;
  uncontrollable Done_u_openBRed;
  uncontrollable Done_u_openBNotRed;
  uncontrollable Done_u_closeB;
  uncontrollable Done_8;
  uncontrollable Done_9;
  uncontrollable u_emerg;
end
group CommandVTL12:
  uncontrollable u_red;
  uncontrollable u_green;
  uncontrollable u_emerg;
end
group CommandVTL34:
  uncontrollable u_red;
  uncontrollable u_green;
  uncontrollable u_emerg;
end
group CommandVTL56:
  uncontrollable u_red;
  uncontrollable u_green;
  uncontrollable u_emerg;
end
group CommandVTL78:
  uncontrollable u_red;
  uncontrollable u_green;
  uncontrollable u_emerg;
end
group EmergencyStop:
  uncontrollable u_emerg_on;
  uncontrollable u_emerg_off;
end
group OverrideSwitch:
  uncontrollable u_turn_on;
  uncontrollable u_turn_off;
end
group sup:
  alg bool emergency = EmergencyStop.Active or BD.NotDecelerating or BD.UndesiredClosed;
  group Beveiligingen:
    group VF2:
      supervisor invariant .BB1.Actuator.c_close needs StopSigns.S1.On and StopSigns.S4.On and SSsOnTimer.Finished;
      supervisor invariant .BB2.Actuator.c_close needs StopSigns.S1.On and StopSigns.S4.On and SSsOnTimer.Finished;
    end
    group VF4:
      supervisor invariant .LM.Pump.c_on needs BB1.Closed.On and BB2.Closed.On;
      supervisor invariant .BD.Motor.c_on needs BB1.Closed.On and BB2.Closed.On;
      supervisor invariant .BR.Actuator.c_release needs BB1.Closed.On and BB2.Closed.On;
      supervisor invariant .LM.Valve.c_lock needs BB1.Closed.On and BB2.Closed.On;
      supervisor invariant .LM.Valve.c_unlock needs BB1.Closed.On and BB2.Closed.On;
      supervisor invariant .BD.Direction.c_open needs BB1.Closed.On and BB2.Closed.On;
      supervisor invariant .BD.Direction.c_close needs BB1.Closed.On and BB2.Closed.On;
    end
    group VF5:
      supervisor invariant .VTL1.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
      supervisor invariant .VTL2.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
      supervisor invariant .VTL3.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
      supervisor invariant .VTL4.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
      supervisor invariant .VTL5.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
      supervisor invariant .VTL6.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
      supervisor invariant .VTL7.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
      supervisor invariant .VTL8.Actuator.c_green needs BD.Open.On and BR.Sensor.Applied and BR.Actuator.Apply;
    end
    group VF6A:
      supervisor invariant .VTL3.Actuator.c_green needs (VTL1.RedAspect or VTL2.RedAspect) and (not VTL1.RedStaysOff or not VTL2.RedStaysOff);
      supervisor invariant .VTL4.Actuator.c_green needs (VTL1.RedAspect or VTL2.RedAspect) and (not VTL1.RedStaysOff or not VTL2.RedStaysOff);
      supervisor invariant .VTL3.Actuator.c_redGreen needs not VTL1.RedGreenAspect and not VTL2.RedGreenAspect;
      supervisor invariant .VTL4.Actuator.c_redGreen needs not VTL1.RedGreenAspect and not VTL2.RedGreenAspect;
    end
    group VF6B:
      supervisor invariant .VTL1.Actuator.c_green needs (VTL3.RedAspect or VTL4.RedAspect) and (not VTL3.RedStaysOff or not VTL4.RedStaysOff);
      supervisor invariant .VTL2.Actuator.c_green needs (VTL3.RedAspect or VTL4.RedAspect) and (not VTL3.RedStaysOff or not VTL4.RedStaysOff);
      supervisor invariant .VTL1.Actuator.c_redGreen needs not VTL3.RedGreenAspect and not VTL4.RedGreenAspect;
      supervisor invariant .VTL2.Actuator.c_redGreen needs not VTL3.RedGreenAspect and not VTL4.RedGreenAspect;
    end
    group VF6C:
      supervisor invariant .VTL7.Actuator.c_green needs (VTL5.RedAspect or VTL6.RedAspect) and (not VTL5.RedStaysOff or not VTL6.RedStaysOff);
      supervisor invariant .VTL8.Actuator.c_green needs (VTL5.RedAspect or VTL6.RedAspect) and (not VTL5.RedStaysOff or not VTL6.RedStaysOff);
      supervisor invariant .VTL7.Actuator.c_redGreen needs not VTL5.RedGreenAspect and not VTL6.RedGreenAspect;
      supervisor invariant .VTL8.Actuator.c_redGreen needs not VTL5.RedGreenAspect and not VTL6.RedGreenAspect;
    end
    group VF6D:
      supervisor invariant .VTL5.Actuator.c_green needs (VTL7.RedAspect or VTL8.RedAspect) and (not VTL7.RedStaysOff or not VTL8.RedStaysOff);
      supervisor invariant .VTL6.Actuator.c_green needs (VTL7.RedAspect or VTL8.RedAspect) and (not VTL7.RedStaysOff or not VTL8.RedStaysOff);
      supervisor invariant .VTL5.Actuator.c_redGreen needs not VTL7.RedGreenAspect and not VTL8.RedGreenAspect;
      supervisor invariant .VTL6.Actuator.c_redGreen needs not VTL7.RedGreenAspect and not VTL8.RedGreenAspect;
    end
    group VF7:
      alg bool redLampShown = (VTL1.Red.On or VTL2.Red.On) and (not VTL1.RedStaysOff or not VTL2.RedStaysOff) and (VTL3.Red.On or VTL4.Red.On) and (not VTL3.RedStaysOff or not VTL4.RedStaysOff) and (VTL5.Red.On or VTL6.Red.On) and (not VTL5.RedStaysOff or not VTL6.RedStaysOff) and (VTL7.Red.On or VTL8.Red.On) and (not VTL7.RedStaysOff or not VTL8.RedStaysOff);
      alg bool RedAspectShown = (VTL1.RedAspect or VTL2.RedAspect) and (not VTL1.RedStaysOff or not VTL2.RedStaysOff) and (VTL3.RedAspect or VTL4.RedAspect) and (not VTL3.RedStaysOff or not VTL4.RedStaysOff) and (VTL5.RedAspect or VTL6.RedAspect) and (not VTL5.RedStaysOff or not VTL6.RedStaysOff) and (VTL7.RedAspect or VTL8.RedAspect) and (not VTL7.RedStaysOff or not VTL8.RedStaysOff);
      supervisor invariant .BD.Motor.c_on needs RedAspectShown or OverrideSwitch.On;
      supervisor invariant .BR.Actuator.c_release needs redLampShown or OverrideSwitch.On;
      supervisor invariant .LM.Pump.c_on needs redLampShown or OverrideSwitch.On;
      supervisor invariant .LM.Valve.c_lock needs redLampShown or OverrideSwitch.On;
      supervisor invariant .LM.Valve.c_unlock needs redLampShown or OverrideSwitch.On;
      supervisor invariant .BD.Direction.c_open needs redLampShown or OverrideSwitch.On;
      supervisor invariant .BD.Direction.c_close needs redLampShown or OverrideSwitch.On;
    end
    group VF8:
      supervisor invariant .BB1.Actuator.c_open needs BD.Closed2.On and LM.Locked.On;
      supervisor invariant .BB2.Actuator.c_open needs BD.Closed2.On and LM.Locked.On;
    end
    group VF10:
      supervisor invariant .StopSigns.Actuator.c_off needs BB1.Open.On and BB2.Open.On and BBsOpenTimer.Finished;
      supervisor invariant .BB.L.c_off needs BB1.Open.On and BB2.Open.On and BBsOpenTimer.Finished;
    end
    group VF11:
      supervisor invariant .StopSigns.Actuator.c_emrgOn needs BB1.UndesiredClosed or BB2.UndesiredClosed or BD.UndesiredOpen or LM.UndesiredUnlock;
      supervisor invariant .BB.L.c_emrgOn needs BB1.UndesiredClosed or BB2.UndesiredClosed or BD.UndesiredOpen or LM.UndesiredUnlock;
      supervisor invariant .StopSigns.Actuator.c_off needs not BB1.UndesiredClosed and not BB2.UndesiredClosed and not BD.UndesiredOpen and not LM.UndesiredUnlock;
      supervisor invariant .BB.L.c_off needs not BB1.UndesiredClosed and not BB2.UndesiredClosed and not BD.UndesiredOpen and not LM.UndesiredUnlock;
    end
    group VF13a:
      supervisor invariant .VTL1.Activated.c_off needs VTL1.RedStaysOff;
      supervisor invariant .VTL1.Activated.c_on needs not VTL1.RedStaysOff;
    end
    group VF13b:
      supervisor invariant .VTL2.Activated.c_off needs VTL2.RedStaysOff;
      supervisor invariant .VTL2.Activated.c_on needs not VTL2.RedStaysOff;
    end
    group VF13c:
      supervisor invariant .VTL3.Activated.c_off needs VTL3.RedStaysOff;
      supervisor invariant .VTL3.Activated.c_on needs not VTL3.RedStaysOff;
    end
    group VF13d:
      supervisor invariant .VTL4.Activated.c_off needs VTL4.RedStaysOff;
      supervisor invariant .VTL4.Activated.c_on needs not VTL4.RedStaysOff;
    end
    group VF13e:
      supervisor invariant .VTL5.Activated.c_off needs VTL5.RedStaysOff;
      supervisor invariant .VTL5.Activated.c_on needs not VTL5.RedStaysOff;
    end
    group VF13f:
      supervisor invariant .VTL6.Activated.c_off needs VTL6.RedStaysOff;
      supervisor invariant .VTL6.Activated.c_on needs not VTL6.RedStaysOff;
    end
    group VF13g:
      supervisor invariant .VTL7.Activated.c_off needs VTL7.RedStaysOff;
      supervisor invariant .VTL7.Activated.c_on needs not VTL7.RedStaysOff;
    end
    group VF13h:
      supervisor invariant .VTL8.Activated.c_off needs VTL8.RedStaysOff;
      supervisor invariant .VTL8.Activated.c_on needs not VTL8.RedStaysOff;
    end
  end
  group Functioneel:
    supervisor invariant .BB1.Actuator.c_close needs BB1.NotClosed.On;
    supervisor invariant .BB2.Actuator.c_close needs BB2.NotClosed.On;
    supervisor invariant .BB1.Actuator.c_close needs not BB1.Stuck;
    supervisor invariant .BB2.Actuator.c_close needs not BB2.Stuck;
    supervisor invariant .BB1.Actuator.c_open needs BB1.NotOpen.On;
    supervisor invariant .BB2.Actuator.c_open needs BB2.NotOpen.On;
    supervisor invariant .BB1.Actuator.c_open needs not BB1.Stuck;
    supervisor invariant .BB2.Actuator.c_open needs not BB2.Stuck;
    supervisor invariant .BB1.Actuator.c_stop needs BB1.Actuator.Closing and BB1ClosedTimer.Finished and BB1.NotClosed.Off or BB1.Actuator.Opening and BB1OpenTimer.Finished and BB1.NotOpen.Off or BB1.Stuck;
    supervisor invariant .BB2.Actuator.c_stop needs BB2.Actuator.Closing and BB2ClosedTimer.Finished and BB2.NotClosed.Off or BB2.Actuator.Opening and BB2OpenTimer.Finished and BB2.NotOpen.Off or BB2.Stuck;
    supervisor invariant .BR.Actuator.c_release needs BR.Release.On;
    supervisor invariant .BR.Actuator.c_apply needs BR.Release.Off;
    supervisor invariant .LM.Valve.c_unlock needs not LM.Unlocked.On and BD.Direction.Idle;
    supervisor invariant .LM.Valve.c_lock needs not LM.Locked.On and BD.Closed.On and BD.Closed2.On and BR.Sensor.Applied and BD.Direction.Idle;
    supervisor invariant .LM.Valve.c_stop needs LM.Valve.Unlock and LMUnlockedTimer100.Finished and LM.Unlocked.On or LM.Valve.Lock and LMLockedTimer.Finished and LM.Locked.On;
    supervisor invariant .LM.Pump.c_on needs not LM.Valve.Idle;
    supervisor invariant .LM.Pump.c_off needs LM.Valve.Idle;
    supervisor invariant .BD.Motor.c_off needs not(BB1.Closed.On and BB2.Closed.On) or not Beveiligingen.VF7.redLampShown and not OverrideSwitch.On;
    supervisor invariant .BD.Direction.c_open needs not BD.Open.On and LMUnlockedTimer3.Finished and LM.Unlocked.On;
    supervisor invariant .BD.Direction.c_close needs not BD.Closed.On and LM.Unlocked.On;
    supervisor invariant .BD.Direction.c_stop needs BD.Open.On and BD.Direction.Opening or BD.Closed.On and BDClosedTimer.Finished and BD.Direction.Closing;
    supervisor invariant .BD.Speed.c_fast needs BD.Direction.Opening and BD.Open.Off and BD.BOpen.Off and BD.BBOpen.Off or BD.Direction.Closing and BD.Closed.Off and BD.BClosed.Off and BD.BBClosed.Off;
    supervisor invariant .BD.Speed.c_slow needs not(BD.Direction.Opening and BD.Open.Off and BD.BOpen.Off and BD.BBOpen.Off or BD.Direction.Closing and BD.Closed.Off and BD.BClosed.Off and BD.BBClosed.Off);
    supervisor invariant .BD.Speed.c_slow needs BD.Direction.Opening and BD.Open.Off or BD.Direction.Closing and BD.Closed.Off;
    supervisor invariant .BD.Speed.c_stop needs BD.Direction.Idle;
  end
  group GUI:
    group emergencyStops:
      supervisor invariant .BB1.Actuator.c_emrgStop needs emergency or BridgeCommands.StopBB;
      supervisor invariant .BB2.Actuator.c_emrgStop needs emergency or BridgeCommands.StopBB;
      supervisor invariant .BR.Actuator.c_emrgStop needs emergency or BridgeCommands.StopB;
      supervisor invariant .LM.Valve.c_emrgStop needs emergency or BridgeCommands.StopB;
      supervisor invariant .LM.Pump.c_emrgStop needs emergency or BridgeCommands.StopB;
      supervisor invariant .BD.Motor.c_emrgStop needs emergency or BridgeCommands.StopB;
      supervisor invariant .BD.Direction.c_emrgStop needs emergency or BridgeCommands.StopB;
      supervisor invariant .BD.Speed.c_emrgStop needs emergency or BridgeCommands.StopB;
      supervisor invariant .BB1.Actuator.c_open needs not emergency;
      supervisor invariant .BB1.Actuator.c_close needs not emergency;
      supervisor invariant .BB2.Actuator.c_open needs not emergency;
      supervisor invariant .BB2.Actuator.c_close needs not emergency;
      supervisor invariant .BR.Actuator.c_release needs not emergency;
      supervisor invariant .LM.Valve.c_unlock needs not emergency;
      supervisor invariant .LM.Valve.c_lock needs not emergency;
      supervisor invariant .LM.Pump.c_on needs not emergency;
      supervisor invariant .BD.Direction.c_open needs not emergency;
      supervisor invariant .BD.Direction.c_close needs not emergency;
      supervisor invariant .BD.Speed.c_fast needs not emergency;
      supervisor invariant .BD.Speed.c_slow needs not emergency;
      supervisor invariant .BD.Motor.c_on needs not emergency;
      supervisor invariant .BR.Actuator.c_release needs not BridgeCommands.StopB;
      supervisor invariant .BD.Motor.c_on needs not BridgeCommands.StopB;
      supervisor invariant .LM.Pump.c_on needs not BridgeCommands.StopB;
      supervisor invariant .BD.Speed.c_fast needs not BridgeCommands.StopB;
      supervisor invariant .BD.Speed.c_slow needs not BridgeCommands.StopB;
    end
    group GUI_VTL1:
      supervisor invariant .VTL1.Actuator.c_red needs CommandVTL12.Red;
      supervisor invariant .VTL1.Actuator.c_redRed needs CommandVTL12.RedRed;
      supervisor invariant .VTL1.Actuator.c_redGreen needs CommandVTL12.RedGreen and not emergency;
      supervisor invariant .VTL1.Actuator.c_green needs CommandVTL12.Green and not emergency;
      supervisor invariant .VTL1.Actuator.c_emrg needs emergency;
    end
    group GUI_VTL2:
      supervisor invariant .VTL2.Actuator.c_red needs CommandVTL12.Red;
      supervisor invariant .VTL2.Actuator.c_redRed needs CommandVTL12.RedRed;
      supervisor invariant .VTL2.Actuator.c_redGreen needs CommandVTL12.RedGreen and not emergency;
      supervisor invariant .VTL2.Actuator.c_green needs CommandVTL12.Green and not emergency;
      supervisor invariant .VTL2.Actuator.c_emrg needs emergency;
    end
    group GUI_VTL3:
      supervisor invariant .VTL3.Actuator.c_red needs CommandVTL34.Red;
      supervisor invariant .VTL3.Actuator.c_redRed needs CommandVTL34.RedRed;
      supervisor invariant .VTL3.Actuator.c_redGreen needs CommandVTL34.RedGreen and not emergency;
      supervisor invariant .VTL3.Actuator.c_green needs CommandVTL34.Green and not emergency;
      supervisor invariant .VTL3.Actuator.c_emrg needs emergency;
    end
    group GUI_VTL4:
      supervisor invariant .VTL4.Actuator.c_red needs CommandVTL34.Red;
      supervisor invariant .VTL4.Actuator.c_redRed needs CommandVTL34.RedRed;
      supervisor invariant .VTL4.Actuator.c_redGreen needs CommandVTL34.RedGreen and not emergency;
      supervisor invariant .VTL4.Actuator.c_green needs CommandVTL34.Green and not emergency;
      supervisor invariant .VTL4.Actuator.c_emrg needs emergency;
    end
    group GUI_VTL5:
      supervisor invariant .VTL5.Actuator.c_red needs CommandVTL56.Red;
      supervisor invariant .VTL5.Actuator.c_redRed needs CommandVTL56.RedRed;
      supervisor invariant .VTL5.Actuator.c_redGreen needs CommandVTL56.RedGreen and not emergency;
      supervisor invariant .VTL5.Actuator.c_green needs CommandVTL56.Green and not emergency;
      supervisor invariant .VTL5.Actuator.c_emrg needs emergency;
    end
    group GUI_VTL6:
      supervisor invariant .VTL6.Actuator.c_red needs CommandVTL56.Red;
      supervisor invariant .VTL6.Actuator.c_redRed needs CommandVTL56.RedRed;
      supervisor invariant .VTL6.Actuator.c_redGreen needs CommandVTL56.RedGreen and not emergency;
      supervisor invariant .VTL6.Actuator.c_green needs CommandVTL56.Green and not emergency;
      supervisor invariant .VTL6.Actuator.c_emrg needs emergency;
    end
    group GUI_VTL7:
      supervisor invariant .VTL7.Actuator.c_red needs CommandVTL78.Red;
      supervisor invariant .VTL7.Actuator.c_redRed needs CommandVTL78.RedRed;
      supervisor invariant .VTL7.Actuator.c_redGreen needs CommandVTL78.RedGreen and not emergency;
      supervisor invariant .VTL7.Actuator.c_green needs CommandVTL78.Green and not emergency;
      supervisor invariant .VTL7.Actuator.c_emrg needs emergency;
    end
    group GUI_VTL8:
      supervisor invariant .VTL8.Actuator.c_red needs CommandVTL78.Red;
      supervisor invariant .VTL8.Actuator.c_redRed needs CommandVTL78.RedRed;
      supervisor invariant .VTL8.Actuator.c_redGreen needs CommandVTL78.RedGreen and not emergency;
      supervisor invariant .VTL8.Actuator.c_green needs CommandVTL78.Green and not emergency;
      supervisor invariant .VTL8.Actuator.c_emrg needs emergency;
    end
    supervisor invariant .StopSigns.Actuator.c_on needs BridgeCommands.CloseLT;
    supervisor invariant .BB.L.c_on needs BridgeCommands.CloseLT;
    supervisor invariant .BB1.Actuator.c_close needs BridgeCommands.CloseBB;
    supervisor invariant .BB2.Actuator.c_close needs BridgeCommands.CloseBB;
    supervisor invariant .BD.Direction.c_open needs BridgeCommands.OpenB;
    supervisor invariant .LM.Valve.c_unlock needs BridgeCommands.OpenB;
    supervisor invariant .BD.Direction.c_close needs BridgeCommands.CloseB;
    supervisor invariant .LM.Valve.c_lock needs BridgeCommands.CloseB;
    supervisor invariant .BB1.Actuator.c_open needs BridgeCommands.OpenBB;
    supervisor invariant .BB2.Actuator.c_open needs BridgeCommands.OpenBB;
    supervisor invariant .StopSigns.Actuator.c_off needs BridgeCommands.OpenLT or BridgeCommands.L10;
    supervisor invariant .BB.L.c_off needs BridgeCommands.OpenLT or BridgeCommands.L10;
  end
  group StopSigns:
    input bool S1StaysOff;
    input bool S2StaysOff;
    input bool S3StaysOff;
    input bool S4StaysOff;
    input bool S5StaysOff;
    plant automaton Actuator:
      location Off:
        initial;
        marked;
        edge .StopSigns.Actuator.c_on goto On;
        edge .StopSigns.Actuator.c_emrgOn goto On;
      location On:
        edge .StopSigns.Actuator.c_off goto Off;
    end
    plant automaton S1:
      location Off:
        initial;
        marked;
        edge .StopSigns.S1.u_on goto On;
      location On:
        edge .StopSigns.S1.u_off goto Off;
    end
    plant automaton S2:
      location Off:
        initial;
        marked;
        edge .StopSigns.S2.u_on goto On;
      location On:
        edge .StopSigns.S2.u_off goto Off;
    end
    plant automaton S3:
      location Off:
        initial;
        marked;
        edge .StopSigns.S3.u_on goto On;
      location On:
        edge .StopSigns.S3.u_off goto Off;
    end
    plant automaton S4:
      location Off:
        initial;
        marked;
        edge .StopSigns.S4.u_on goto On;
      location On:
        edge .StopSigns.S4.u_off goto Off;
    end
    plant automaton S5:
      location Off:
        initial;
        marked;
        edge .StopSigns.S5.u_on goto On;
      location On:
        edge .StopSigns.S5.u_off goto Off;
    end
  end
  plant automaton SSsOnTimer:
    alg bool StartCondition = StopSigns.S1.On and StopSigns.S4.On;
    location Off:
      initial;
      marked;
      edge .SSsOnTimer.c_start when StartCondition goto Running;
    location Running:
      edge .SSsOnTimer.c_stop when not StartCondition goto Off;
      edge .SSsOnTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .SSsOnTimer.c_stop when not StartCondition goto Off;
  end
  group BB:
    plant automaton L:
      location Off:
        initial;
        marked;
        edge .BB.L.c_on goto On;
        edge .BB.L.c_emrgOn goto On;
      location On:
        edge .BB.L.c_off goto Off;
    end
    plant automaton Alternate:
      location Mode1:
        initial;
        marked;
        edge .BB.Alternate.c_mode2 goto Mode2;
      location Mode2:
        marked;
        edge .BB.Alternate.c_mode1 goto Mode1;
    end
  end
  group BB1:
    input bool Stuck;
    input bool UndesiredClosed;
    input bool UndesiredOpen;
    plant automaton Actuator:
      location Idle:
        initial;
        marked;
        edge .BB1.Actuator.c_open goto Opening;
        edge .BB1.Actuator.c_close goto Closing;
      location Opening:
        edge .BB1.Actuator.c_stop, .BB1.Actuator.c_emrgStop goto Idle;
      location Closing:
        edge .BB1.Actuator.c_stop, .BB1.Actuator.c_emrgStop goto Idle;
    end
    plant automaton Open:
      location Off:
        edge .BB1.Open.u_open_on goto On;
      location On:
        initial;
        marked;
        edge .BB1.Open.u_open_off goto Off;
    end
    plant automaton Closed:
      location Off:
        initial;
        marked;
        edge .BB1.Closed.u_closed_on goto On;
      location On:
        edge .BB1.Closed.u_closed_off goto Off;
    end
    plant automaton NotOpen:
      location Off:
        initial;
        marked;
        edge .BB1.NotOpen.u_notOpen_on goto On;
      location On:
        edge .BB1.NotOpen.u_notOpen_off goto Off;
    end
    plant automaton NotClosed:
      location Off:
        edge .BB1.NotClosed.u_notClosed_on goto On;
      location On:
        initial;
        marked;
        edge .BB1.NotClosed.u_notClosed_off goto Off;
    end
  end
  group BB2:
    input bool Stuck;
    input bool UndesiredClosed;
    input bool UndesiredOpen;
    plant automaton Actuator:
      location Idle:
        initial;
        marked;
        edge .BB2.Actuator.c_open goto Opening;
        edge .BB2.Actuator.c_close goto Closing;
      location Opening:
        edge .BB2.Actuator.c_stop, .BB2.Actuator.c_emrgStop goto Idle;
      location Closing:
        edge .BB2.Actuator.c_stop, .BB2.Actuator.c_emrgStop goto Idle;
    end
    plant automaton Open:
      location Off:
        edge .BB2.Open.u_open_on goto On;
      location On:
        initial;
        marked;
        edge .BB2.Open.u_open_off goto Off;
    end
    plant automaton Closed:
      location Off:
        initial;
        marked;
        edge .BB2.Closed.u_closed_on goto On;
      location On:
        edge .BB2.Closed.u_closed_off goto Off;
    end
    plant automaton NotOpen:
      location Off:
        initial;
        marked;
        edge .BB2.NotOpen.u_notOpen_on goto On;
      location On:
        edge .BB2.NotOpen.u_notOpen_off goto Off;
    end
    plant automaton NotClosed:
      location Off:
        edge .BB2.NotClosed.u_notClosed_on goto On;
      location On:
        initial;
        marked;
        edge .BB2.NotClosed.u_notClosed_off goto Off;
    end
  end
  plant automaton BBsOpenTimer:
    alg bool StartCondition = BB1.Open.On and BB2.Open.On;
    location Off:
      initial;
      marked;
      edge .BBsOpenTimer.c_start when StartCondition goto Running;
    location Running:
      edge .BBsOpenTimer.c_stop when not StartCondition goto Off;
      edge .BBsOpenTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .BBsOpenTimer.c_stop when not StartCondition goto Off;
  end
  plant automaton BB1OpenTimer:
    alg bool StartCondition = BB1.Open.On;
    location Off:
      initial;
      marked;
      edge .BB1OpenTimer.c_start when StartCondition goto Running;
    location Running:
      edge .BB1OpenTimer.c_stop when not StartCondition goto Off;
      edge .BB1OpenTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .BB1OpenTimer.c_stop when not StartCondition goto Off;
  end
  plant automaton BB1ClosedTimer:
    alg bool StartCondition = BB1.Closed.On;
    location Off:
      initial;
      marked;
      edge .BB1ClosedTimer.c_start when StartCondition goto Running;
    location Running:
      edge .BB1ClosedTimer.c_stop when not StartCondition goto Off;
      edge .BB1ClosedTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .BB1ClosedTimer.c_stop when not StartCondition goto Off;
  end
  plant automaton BB2OpenTimer:
    alg bool StartCondition = BB2.Open.On;
    location Off:
      initial;
      marked;
      edge .BB2OpenTimer.c_start when StartCondition goto Running;
    location Running:
      edge .BB2OpenTimer.c_stop when not StartCondition goto Off;
      edge .BB2OpenTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .BB2OpenTimer.c_stop when not StartCondition goto Off;
  end
  plant automaton BB2ClosedTimer:
    alg bool StartCondition = BB2.Closed.On;
    location Off:
      initial;
      marked;
      edge .BB2ClosedTimer.c_start when StartCondition goto Running;
    location Running:
      edge .BB2ClosedTimer.c_stop when not StartCondition goto Off;
      edge .BB2ClosedTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .BB2ClosedTimer.c_stop when not StartCondition goto Off;
  end
  group VTL1:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL1.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL1.Actuator.c_redGreen goto RedGreen;
        edge .VTL1.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL1.Actuator.c_red goto Red;
        edge .VTL1.Actuator.c_green goto Green;
        edge .VTL1.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL1.Actuator.c_red goto Red;
        edge .VTL1.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL1.Activated.c_off goto Off;
      location Off:
        edge .VTL1.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL1.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL1.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL1.Green.u_green_on goto On;
      location On:
        edge .VTL1.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL1.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL1.Red2.u_red2_off goto Off;
    end
  end
  group VTL2:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL2.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL2.Actuator.c_redGreen goto RedGreen;
        edge .VTL2.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL2.Actuator.c_red goto Red;
        edge .VTL2.Actuator.c_green goto Green;
        edge .VTL2.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL2.Actuator.c_red goto Red;
        edge .VTL2.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL2.Activated.c_off goto Off;
      location Off:
        edge .VTL2.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL2.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL2.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL2.Green.u_green_on goto On;
      location On:
        edge .VTL2.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL2.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL2.Red2.u_red2_off goto Off;
    end
  end
  group VTL3:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL3.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL3.Actuator.c_redGreen goto RedGreen;
        edge .VTL3.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL3.Actuator.c_red goto Red;
        edge .VTL3.Actuator.c_green goto Green;
        edge .VTL3.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL3.Actuator.c_red goto Red;
        edge .VTL3.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL3.Activated.c_off goto Off;
      location Off:
        edge .VTL3.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL3.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL3.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL3.Green.u_green_on goto On;
      location On:
        edge .VTL3.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL3.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL3.Red2.u_red2_off goto Off;
    end
  end
  group VTL4:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL4.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL4.Actuator.c_redGreen goto RedGreen;
        edge .VTL4.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL4.Actuator.c_red goto Red;
        edge .VTL4.Actuator.c_green goto Green;
        edge .VTL4.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL4.Actuator.c_red goto Red;
        edge .VTL4.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL4.Activated.c_off goto Off;
      location Off:
        edge .VTL4.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL4.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL4.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL4.Green.u_green_on goto On;
      location On:
        edge .VTL4.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL4.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL4.Red2.u_red2_off goto Off;
    end
  end
  group VTL5:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL5.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL5.Actuator.c_redGreen goto RedGreen;
        edge .VTL5.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL5.Actuator.c_red goto Red;
        edge .VTL5.Actuator.c_green goto Green;
        edge .VTL5.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL5.Actuator.c_red goto Red;
        edge .VTL5.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL5.Activated.c_off goto Off;
      location Off:
        edge .VTL5.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL5.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL5.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL5.Green.u_green_on goto On;
      location On:
        edge .VTL5.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL5.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL5.Red2.u_red2_off goto Off;
    end
  end
  group VTL6:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL6.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL6.Actuator.c_redGreen goto RedGreen;
        edge .VTL6.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL6.Actuator.c_red goto Red;
        edge .VTL6.Actuator.c_green goto Green;
        edge .VTL6.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL6.Actuator.c_red goto Red;
        edge .VTL6.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL6.Activated.c_off goto Off;
      location Off:
        edge .VTL6.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL6.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL6.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL6.Green.u_green_on goto On;
      location On:
        edge .VTL6.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL6.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL6.Red2.u_red2_off goto Off;
    end
  end
  group VTL7:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL7.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL7.Actuator.c_redGreen goto RedGreen;
        edge .VTL7.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL7.Actuator.c_red goto Red;
        edge .VTL7.Actuator.c_green goto Green;
        edge .VTL7.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL7.Actuator.c_red goto Red;
        edge .VTL7.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL7.Activated.c_off goto Off;
      location Off:
        edge .VTL7.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL7.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL7.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL7.Green.u_green_on goto On;
      location On:
        edge .VTL7.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL7.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL7.Red2.u_red2_off goto Off;
    end
  end
  group VTL8:
    alg bool RedAspect = Red.On and Green.Off;
    alg bool RedGreenAspect = Red.On and Green.On;
    input bool RedStaysOff;
    input bool GreenStaysOff;
    input bool Red2StaysOff;
    alg bool Fault = RedStaysOff or GreenStaysOff or Red2StaysOff;
    plant automaton Actuator:
      location RedRed:
        edge .VTL8.Actuator.c_red goto Red;
      location Red:
        initial;
        marked;
        edge .VTL8.Actuator.c_redGreen goto RedGreen;
        edge .VTL8.Actuator.c_redRed goto RedRed;
      location RedGreen:
        edge .VTL8.Actuator.c_red goto Red;
        edge .VTL8.Actuator.c_green goto Green;
        edge .VTL8.Actuator.c_emrg goto Red;
      location Green:
        edge .VTL8.Actuator.c_red goto Red;
        edge .VTL8.Actuator.c_emrg goto Red;
    end
    plant automaton Activated:
      location On:
        initial;
        marked;
        edge .VTL8.Activated.c_off goto Off;
      location Off:
        edge .VTL8.Activated.c_on goto On;
    end
    plant automaton Red:
      location Off:
        edge .VTL8.Red.u_red_on goto On;
      location On:
        initial;
        marked;
        edge .VTL8.Red.u_red_off goto Off;
    end
    plant automaton Green:
      location Off:
        initial;
        marked;
        edge .VTL8.Green.u_green_on goto On;
      location On:
        edge .VTL8.Green.u_green_off goto Off;
    end
    plant automaton Red2:
      location Off:
        initial;
        marked;
        edge .VTL8.Red2.u_red2_on goto On;
      location On:
        marked;
        edge .VTL8.Red2.u_red2_off goto Off;
    end
  end
  group BR:
    plant automaton Actuator:
      location Apply:
        initial;
        marked;
        edge .BR.Actuator.c_release goto Release;
      location Release:
        edge .BR.Actuator.c_apply goto Apply;
        edge .BR.Actuator.c_emrgStop goto Apply;
    end
    plant automaton Sensor:
      location Applied:
        initial;
        marked;
        edge .BR.Sensor.u_released goto Released;
      location Released:
        edge .BR.Sensor.u_applied goto Applied;
    end
    plant automaton Release:
      location Off:
        initial;
        marked;
        edge .BR.Release.u_release goto On;
      location On:
        edge .BR.Release.u_apply goto Off;
    end
  end
  group LM:
    input bool Stuck;
    input bool UndesiredUnlock;
    plant automaton Valve:
      location Idle:
        initial;
        marked;
        edge .LM.Valve.c_lock goto Lock;
        edge .LM.Valve.c_unlock goto Unlock;
      location Lock:
        edge .LM.Valve.c_stop, .LM.Valve.c_emrgStop goto Idle;
      location Unlock:
        edge .LM.Valve.c_stop, .LM.Valve.c_emrgStop goto Idle;
    end
    plant automaton Pump:
      location Off:
        initial;
        marked;
        edge .LM.Pump.c_on goto On;
      location On:
        edge .LM.Pump.c_off, .LM.Pump.c_emrgStop goto Off;
    end
    plant automaton Locked:
      location Off:
        edge .LM.Locked.u_locked_on goto On;
      location On:
        initial;
        marked;
        edge .LM.Locked.u_locked_off goto Off;
    end
    plant automaton Unlocked:
      location Off:
        initial;
        marked;
        edge .LM.Unlocked.u_unlocked_on goto On;
      location On:
        edge .LM.Unlocked.u_unlocked_off goto Off;
    end
  end
  plant automaton LMLockedTimer:
    alg bool StartCondition = LM.Locked.On;
    location Off:
      initial;
      marked;
      edge .LMLockedTimer.c_start when StartCondition goto Running;
    location Running:
      edge .LMLockedTimer.c_stop when not StartCondition goto Off;
      edge .LMLockedTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .LMLockedTimer.c_stop when not StartCondition goto Off;
  end
  plant automaton LMUnlockedTimer100:
    alg bool StartCondition = LM.Unlocked.On;
    location Off:
      initial;
      marked;
      edge .LMUnlockedTimer100.c_start when StartCondition goto Running;
    location Running:
      edge .LMUnlockedTimer100.c_stop when not StartCondition goto Off;
      edge .LMUnlockedTimer100.u_timeout goto Finished;
    location Finished:
      marked;
      edge .LMUnlockedTimer100.c_stop when not StartCondition goto Off;
  end
  plant automaton LMUnlockedTimer3:
    alg bool StartCondition = LM.Unlocked.On;
    location Off:
      initial;
      marked;
      edge .LMUnlockedTimer3.c_start when StartCondition goto Running;
    location Running:
      edge .LMUnlockedTimer3.c_stop when not StartCondition goto Off;
      edge .LMUnlockedTimer3.u_timeout goto Finished;
    location Finished:
      marked;
      edge .LMUnlockedTimer3.c_stop when not StartCondition goto Off;
  end
  group BD:
    input bool NotDecelerating;
    input bool UndesiredClosed;
    input bool UndesiredOpen;
    plant automaton Motor:
      location Off:
        initial;
        marked;
        edge .BD.Motor.c_on goto On;
      location On:
        edge .BD.Motor.c_off goto Off;
        edge .BD.Motor.c_emrgStop goto Off;
    end
    plant automaton Direction:
      location Idle:
        initial;
        marked;
        edge .BD.Direction.c_open goto Opening;
        edge .BD.Direction.c_close goto Closing;
      location Opening:
        edge .BD.Direction.c_stop, .BD.Direction.c_emrgStop goto Idle;
      location Closing:
        edge .BD.Direction.c_stop, .BD.Direction.c_emrgStop goto Idle;
    end
    plant automaton Speed:
      location Idle:
        initial;
        marked;
        edge .BD.Speed.c_fast goto Fast;
        edge .BD.Speed.c_slow goto Slow;
      location Fast:
        edge .BD.Speed.c_stop, .BD.Speed.c_emrgStop goto Idle;
        edge .BD.Speed.c_slow goto Slow;
      location Slow:
        edge .BD.Speed.c_stop, .BD.Speed.c_emrgStop goto Idle;
        edge .BD.Speed.c_fast goto Fast;
    end
    plant automaton Closed2:
      location Off:
        edge .BD.Closed2.u_closed2_on goto On;
      location On:
        initial;
        marked;
        edge .BD.Closed2.u_closed2_off goto Off;
    end
    plant automaton Closed:
      location Off:
        edge .BD.Closed.u_closed_on goto On;
      location On:
        initial;
        marked;
        edge .BD.Closed.u_closed_off goto Off;
    end
    plant automaton BClosed:
      location Off:
        edge .BD.BClosed.u_bClosed_on goto On;
      location On:
        initial;
        marked;
        edge .BD.BClosed.u_bClosed_off goto Off;
    end
    plant automaton BBClosed:
      location Off:
        edge .BD.BBClosed.u_bbClosed_on goto On;
      location On:
        initial;
        marked;
        edge .BD.BBClosed.u_bbClosed_off goto Off;
    end
    plant automaton BBOpen:
      location Off:
        initial;
        marked;
        edge .BD.BBOpen.u_bbOpen_on goto On;
      location On:
        edge .BD.BBOpen.u_bbOpen_off goto Off;
    end
    plant automaton BOpen:
      location Off:
        initial;
        marked;
        edge .BD.BOpen.u_bOpen_on goto On;
      location On:
        edge .BD.BOpen.u_bOpen_off goto Off;
    end
    plant automaton Open:
      location Off:
        initial;
        marked;
        edge .BD.Open.u_open_on goto On;
      location On:
        edge .BD.Open.u_open_off goto Off;
    end
  end
  plant automaton BDClosedTimer:
    alg bool StartCondition = BD.Closed.On;
    location Off:
      initial;
      marked;
      edge .BDClosedTimer.c_start when StartCondition goto Running;
    location Running:
      edge .BDClosedTimer.c_stop when not StartCondition goto Off;
      edge .BDClosedTimer.u_timeout goto Finished;
    location Finished:
      marked;
      edge .BDClosedTimer.c_stop when not StartCondition goto Off;
  end
  plant automaton BridgeCommands:
    monitor .BridgeCommands.u_closeLT, .BridgeCommands.u_openLT, .BridgeCommands.u_openB, .BridgeCommands.u_closeB, .BridgeCommands.u_closeBB, .BridgeCommands.u_stop;
    alg bool CloseLT = L11;
    alg bool OpenLT = L13;
    alg bool CloseBB = L15;
    alg bool OpenBB = L17 or L13;
    alg bool StopBB = L16;
    alg bool OpenB = L21;
    alg bool CloseB = L23;
    alg bool StopB = L22;
    alg bool CloseLT_act = L11;
    alg bool CloseLT_bdb = L10 or L11 or L12 or StopSignsOn;
    alg bool OpenLT_act = L13 or L17;
    alg bool OpenLT_bdb = L12 or L14 or L16 or L17 or L20;
    alg bool Stop_act = L12 or L16 or L22;
    alg bool Stop_bdb = L11 or L12 or L13 or L15 or L16 or L17 or L21 or L22 or L23;
    alg bool CloseBB_act = L15;
    alg bool CloseBB_bdb = L14 or L15 or L16;
    alg bool OpenB_act = L21;
    alg bool OpenB_bdb = L20 or L21 or L22;
    alg bool CloseB_act = L23;
    alg bool CloseB_bdb = L22 or L23 or L31;
    alg bool Window1CloseAble = L10 or L14 or L20 or L30 or L31;
    alg bool Window2CloseAble = L10 or L14 or L20 or L30 or L31;
    alg bool Window1Visible = L10 or L11 or L12 or L13 or L14 or L15 or L16 or L17;
    alg bool Window2Visible = L20 or L21 or L22 or L23 or L30 or L31;
    alg bool Red = (VTL1.RedAspect or VTL2.RedAspect) and (VTL3.RedAspect or VTL4.RedAspect) and (VTL5.RedAspect or VTL6.RedAspect) and (VTL7.RedAspect or VTL8.RedAspect) and VTL1.Green.Off and VTL2.Green.Off and VTL3.Green.Off and VTL4.Green.Off and VTL5.Green.Off and VTL6.Green.Off and VTL7.Green.Off and VTL8.Green.Off;
    alg bool closeBBd = BB1.Closed.On and BB2.Closed.On;
    alg bool BridgeMayNotMove = VTL1.Fault and VTL2.Fault or VTL3.Fault and VTL4.Fault or VTL5.Fault and VTL6.Fault or VTL7.Fault and VTL8.Fault or not closeBBd;
    alg bool StopSignsOn = StopSigns.S1.On and StopSigns.S4.On and SSsOnTimer.Finished;
    location L10:
      initial;
      marked;
      edge .BridgeCommands.u_closeLT goto L11;
    location L11:
      edge .BridgeCommands.u_stop goto L12;
      edge .BridgeCommands.u_emerg when emergency goto L12;
      edge .BridgeCommands.Done_u_closeLT when StopSignsOn goto L14;
    location L12:
      edge .BridgeCommands.u_closeLT goto L11;
      edge .BridgeCommands.u_openLT goto L13;
    location L13:
      edge .BridgeCommands.u_stop goto L12;
      edge .BridgeCommands.u_emerg when emergency goto L12;
      edge .BridgeCommands.Done_u_openLT when StopSigns.Actuator.Off goto L10;
    location L14:
      edge .BridgeCommands.u_openLT goto L13;
      edge .BridgeCommands.u_closeBB when StopSignsOn goto L15;
    location L15:
      edge .BridgeCommands.u_stop goto L16;
      edge .BridgeCommands.u_emerg when EmergencyStop.Active goto L16;
      edge .BridgeCommands.Done_u_closeBB when BB1.Closed.On and BB2.Closed.On goto L20;
    location L16:
      edge .BridgeCommands.u_closeBB goto L15;
      edge .BridgeCommands.u_openLT goto L17;
    location L17:
      edge .BridgeCommands.Done_BarrierOpen when BB1.Open.On and BB2.Open.On goto L13;
      edge .BridgeCommands.u_stop goto L16;
      edge .BridgeCommands.u_emerg when EmergencyStop.Active goto L16;
    location L20:
      edge .BridgeCommands.u_openB when not BridgeMayNotMove or OverrideSwitch.On goto L21;
      edge .BridgeCommands.u_openLT goto L17;
    location L21:
      edge .BridgeCommands.u_stop goto L22;
      edge .BridgeCommands.u_emerg when EmergencyStop.Active goto L22;
      edge .BridgeCommands.Done_u_openBRed when Red and BD.Open.On goto L31;
      edge .BridgeCommands.Done_u_openBNotRed when not Red and BD.Open.On goto L30;
    location L22:
      edge .BridgeCommands.u_openB goto L21;
      edge .BridgeCommands.u_closeB goto L23;
    location L23:
      edge .BridgeCommands.u_stop goto L22;
      edge .BridgeCommands.u_emerg when EmergencyStop.Active goto L22;
      edge .BridgeCommands.Done_u_closeB when BD.Closed.On and LM.Locked.On goto L20;
    location L30:
      edge .BridgeCommands.Done_8 when Red or OverrideSwitch.On goto L31;
    location L31:
      edge .BridgeCommands.u_closeB goto L23;
      edge .BridgeCommands.Done_9 when not Red and not OverrideSwitch.On goto L30;
  end
  plant automaton CommandVTL12:
    monitor .CommandVTL12.u_red, .CommandVTL12.u_green, u_r2, .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed;
    alg bool GreenOk = not CommandVTL34.Green and BD.Open.On and (not VTL3.RedStaysOff or not VTL4.RedStaysOff);
    alg bool RedGreenOk = not VTL3.Actuator.RedGreen and not VTL4.Actuator.RedGreen and not BridgeCommands.CloseB_act;
    alg bool allRed = Red and CommandVTL34.Red and CommandVTL56.Red and CommandVTL78.Red;
    alg bool emrgStop = BridgeCommands.StopB or EmergencyStop.Active;
    location RedRed:
      edge u_r2Off goto Red;
    location Red:
      initial;
      marked;
      edge .CommandVTL12.u_green when RedGreenOk goto RedGreen;
      edge u_r2 when allRed goto RedRed;
    location RedGreen:
      edge .CommandVTL12.u_red goto Red;
      edge .CommandVTL12.u_emerg when emrgStop goto Red;
      edge .CommandVTL12.u_green when GreenOk goto Green;
      edge .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed when GreenOk goto Green;
    location Green:
      edge .CommandVTL12.u_red goto Red;
      edge .CommandVTL12.u_emerg when emrgStop goto Red;
  end
  plant automaton CommandVTL34:
    monitor .CommandVTL34.u_red, .CommandVTL34.u_green, u_r2, .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed;
    alg bool GreenOk = not CommandVTL12.Green and BD.Open.On and (not VTL1.RedStaysOff or not VTL2.RedStaysOff);
    alg bool RedGreenOk = not VTL1.Actuator.RedGreen and not VTL2.Actuator.RedGreen and not BridgeCommands.CloseB_act;
    alg bool allRed = CommandVTL12.Red and Red and CommandVTL56.Red and CommandVTL78.Red;
    alg bool emrgStop = BridgeCommands.StopB or EmergencyStop.Active;
    location RedRed:
      edge u_r2Off goto Red;
    location Red:
      initial;
      marked;
      edge .CommandVTL34.u_green when RedGreenOk goto RedGreen;
      edge u_r2 when allRed goto RedRed;
    location RedGreen:
      edge .CommandVTL34.u_red goto Red;
      edge .CommandVTL34.u_emerg when emrgStop goto Red;
      edge .CommandVTL34.u_green when GreenOk goto Green;
      edge .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed when GreenOk goto Green;
    location Green:
      edge .CommandVTL34.u_red goto Red;
      edge .CommandVTL34.u_emerg when emrgStop goto Red;
  end
  plant automaton CommandVTL56:
    monitor .CommandVTL56.u_red, .CommandVTL56.u_green, u_r2, .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed;
    alg bool GreenOk = not CommandVTL78.Green and BD.Open.On and (not VTL7.RedStaysOff or not VTL8.RedStaysOff);
    alg bool RedGreenOk = not VTL7.Actuator.RedGreen and not VTL8.Actuator.RedGreen and not BridgeCommands.CloseB_act;
    alg bool allRed = CommandVTL12.Red and CommandVTL34.Red and Red and CommandVTL78.Red;
    alg bool emrgStop = BridgeCommands.StopB or EmergencyStop.Active;
    location RedRed:
      edge u_r2Off goto Red;
    location Red:
      initial;
      marked;
      edge .CommandVTL56.u_green when RedGreenOk goto RedGreen;
      edge u_r2 when allRed goto RedRed;
    location RedGreen:
      edge .CommandVTL56.u_red goto Red;
      edge .CommandVTL56.u_emerg when emrgStop goto Red;
      edge .CommandVTL56.u_green when GreenOk goto Green;
      edge .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed when GreenOk goto Green;
    location Green:
      edge .CommandVTL56.u_red goto Red;
      edge .CommandVTL56.u_emerg when emrgStop goto Red;
  end
  plant automaton CommandVTL78:
    monitor .CommandVTL78.u_red, .CommandVTL78.u_green, u_r2, .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed;
    alg bool GreenOk = not CommandVTL56.Green and BD.Open.On and (not VTL5.RedStaysOff or not VTL6.RedStaysOff);
    alg bool RedGreenOk = not VTL5.Actuator.RedGreen and not VTL6.Actuator.RedGreen and not BridgeCommands.CloseB_act;
    alg bool allRed = CommandVTL12.Red and CommandVTL34.Red and CommandVTL56.Red and Red;
    alg bool emrgStop = BridgeCommands.StopB or EmergencyStop.Active;
    location RedRed:
      edge u_r2Off goto Red;
    location Red:
      initial;
      marked;
      edge .CommandVTL78.u_green when RedGreenOk goto RedGreen;
      edge u_r2 when allRed goto RedRed;
    location RedGreen:
      edge .CommandVTL78.u_red goto Red;
      edge .CommandVTL78.u_emerg when emrgStop goto Red;
      edge .CommandVTL78.u_green when GreenOk goto Green;
      edge .BridgeCommands.Done_u_openBRed, .BridgeCommands.Done_u_openBNotRed when GreenOk goto Green;
    location Green:
      edge .CommandVTL78.u_red goto Red;
      edge .CommandVTL78.u_emerg when emrgStop goto Red;
  end
  plant automaton EmergencyStop:
    location Inactive:
      initial;
      marked;
      edge .EmergencyStop.u_emerg_on goto Active;
    location Active:
      edge .EmergencyStop.u_emerg_off goto Inactive;
  end
  plant automaton OverrideSwitch:
    location Off:
      initial;
      marked;
      edge .OverrideSwitch.u_turn_on goto On;
    location On:
      edge .OverrideSwitch.u_turn_off goto Off;
  end
  supervisor automaton sup:
    alphabet .StopSigns.Actuator.c_on, .StopSigns.Actuator.c_emrgOn, .StopSigns.Actuator.c_off, .SSsOnTimer.c_start, .SSsOnTimer.c_stop, .BB.L.c_on, .BB.L.c_emrgOn, .BB.L.c_off, .BB.Alternate.c_mode2, .BB.Alternate.c_mode1, .BB1.Actuator.c_open, .BB1.Actuator.c_close, .BB1.Actuator.c_stop, .BB1.Actuator.c_emrgStop, .BB2.Actuator.c_open, .BB2.Actuator.c_close, .BB2.Actuator.c_stop, .BB2.Actuator.c_emrgStop, .BBsOpenTimer.c_start, .BBsOpenTimer.c_stop, .BB1OpenTimer.c_start, .BB1OpenTimer.c_stop, .BB1ClosedTimer.c_start, .BB1ClosedTimer.c_stop, .BB2OpenTimer.c_start, .BB2OpenTimer.c_stop, .BB2ClosedTimer.c_start, .BB2ClosedTimer.c_stop, .VTL1.Actuator.c_red, .VTL1.Actuator.c_redGreen, .VTL1.Actuator.c_redRed, .VTL1.Actuator.c_green, .VTL1.Actuator.c_emrg, .VTL1.Activated.c_off, .VTL1.Activated.c_on, .VTL2.Actuator.c_red, .VTL2.Actuator.c_redGreen, .VTL2.Actuator.c_redRed, .VTL2.Actuator.c_green, .VTL2.Actuator.c_emrg, .VTL2.Activated.c_off, .VTL2.Activated.c_on, .VTL3.Actuator.c_red, .VTL3.Actuator.c_redGreen, .VTL3.Actuator.c_redRed, .VTL3.Actuator.c_green, .VTL3.Actuator.c_emrg, .VTL3.Activated.c_off, .VTL3.Activated.c_on, .VTL4.Actuator.c_red, .VTL4.Actuator.c_redGreen, .VTL4.Actuator.c_redRed, .VTL4.Actuator.c_green, .VTL4.Actuator.c_emrg, .VTL4.Activated.c_off, .VTL4.Activated.c_on, .VTL5.Actuator.c_red, .VTL5.Actuator.c_redGreen, .VTL5.Actuator.c_redRed, .VTL5.Actuator.c_green, .VTL5.Actuator.c_emrg, .VTL5.Activated.c_off, .VTL5.Activated.c_on, .VTL6.Actuator.c_red, .VTL6.Actuator.c_redGreen, .VTL6.Actuator.c_redRed, .VTL6.Actuator.c_green, .VTL6.Actuator.c_emrg, .VTL6.Activated.c_off, .VTL6.Activated.c_on, .VTL7.Actuator.c_red, .VTL7.Actuator.c_redGreen, .VTL7.Actuator.c_redRed, .VTL7.Actuator.c_green, .VTL7.Actuator.c_emrg, .VTL7.Activated.c_off, .VTL7.Activated.c_on, .VTL8.Actuator.c_red, .VTL8.Actuator.c_redGreen, .VTL8.Actuator.c_redRed, .VTL8.Actuator.c_green, .VTL8.Actuator.c_emrg, .VTL8.Activated.c_off, .VTL8.Activated.c_on, .BR.Actuator.c_release, .BR.Actuator.c_apply, .BR.Actuator.c_emrgStop, .LM.Valve.c_lock, .LM.Valve.c_unlock, .LM.Valve.c_stop, .LM.Valve.c_emrgStop, .LM.Pump.c_on, .LM.Pump.c_off, .LM.Pump.c_emrgStop, .LMLockedTimer.c_start, .LMLockedTimer.c_stop, .LMUnlockedTimer100.c_start, .LMUnlockedTimer100.c_stop, .LMUnlockedTimer3.c_start, .LMUnlockedTimer3.c_stop, .BD.Motor.c_on, .BD.Motor.c_off, .BD.Motor.c_emrgStop, .BD.Direction.c_open, .BD.Direction.c_close, .BD.Direction.c_stop, .BD.Direction.c_emrgStop, .BD.Speed.c_fast, .BD.Speed.c_slow, .BD.Speed.c_stop, .BD.Speed.c_emrgStop, .BDClosedTimer.c_start, .BDClosedTimer.c_stop;
    location:
      initial;
      marked;
      edge .BB.Alternate.c_mode1 when true;
      edge .BB.Alternate.c_mode2 when true;
      edge .BB.L.c_emrgOn when true;
      edge .BB.L.c_off when true;
      edge .BB.L.c_on when true;
      edge .BB1.Actuator.c_close when true;
      edge .BB1.Actuator.c_emrgStop when true;
      edge .BB1.Actuator.c_open when true;
      edge .BB1.Actuator.c_stop when true;
      edge .BB1ClosedTimer.c_start when true;
      edge .BB1ClosedTimer.c_stop when true;
      edge .BB1OpenTimer.c_start when true;
      edge .BB1OpenTimer.c_stop when true;
      edge .BB2.Actuator.c_close when true;
      edge .BB2.Actuator.c_emrgStop when true;
      edge .BB2.Actuator.c_open when true;
      edge .BB2.Actuator.c_stop when true;
      edge .BB2ClosedTimer.c_start when true;
      edge .BB2ClosedTimer.c_stop when true;
      edge .BB2OpenTimer.c_start when true;
      edge .BB2OpenTimer.c_stop when true;
      edge .BBsOpenTimer.c_start when true;
      edge .BBsOpenTimer.c_stop when true;
      edge .BD.Direction.c_close when true;
      edge .BD.Direction.c_emrgStop when true;
      edge .BD.Direction.c_open when true;
      edge .BD.Direction.c_stop when true;
      edge .BD.Motor.c_emrgStop when true;
      edge .BD.Motor.c_off when true;
      edge .BD.Motor.c_on when true;
      edge .BD.Speed.c_emrgStop when true;
      edge .BD.Speed.c_fast when true;
      edge .BD.Speed.c_slow when true;
      edge .BD.Speed.c_stop when true;
      edge .BDClosedTimer.c_start when true;
      edge .BDClosedTimer.c_stop when true;
      edge .BR.Actuator.c_apply when true;
      edge .BR.Actuator.c_emrgStop when true;
      edge .BR.Actuator.c_release when true;
      edge .LM.Pump.c_emrgStop when true;
      edge .LM.Pump.c_off when true;
      edge .LM.Pump.c_on when true;
      edge .LM.Valve.c_emrgStop when true;
      edge .LM.Valve.c_lock when true;
      edge .LM.Valve.c_stop when true;
      edge .LM.Valve.c_unlock when true;
      edge .LMLockedTimer.c_start when true;
      edge .LMLockedTimer.c_stop when true;
      edge .LMUnlockedTimer100.c_start when true;
      edge .LMUnlockedTimer100.c_stop when true;
      edge .LMUnlockedTimer3.c_start when true;
      edge .LMUnlockedTimer3.c_stop when true;
      edge .SSsOnTimer.c_start when true;
      edge .SSsOnTimer.c_stop when true;
      edge .StopSigns.Actuator.c_emrgOn when true;
      edge .StopSigns.Actuator.c_off when true;
      edge .StopSigns.Actuator.c_on when true;
      edge .VTL1.Activated.c_off when true;
      edge .VTL1.Activated.c_on when true;
      edge .VTL1.Actuator.c_emrg when true;
      edge .VTL1.Actuator.c_green when true;
      edge .VTL1.Actuator.c_red when true;
      edge .VTL1.Actuator.c_redGreen when true;
      edge .VTL1.Actuator.c_redRed when true;
      edge .VTL2.Activated.c_off when true;
      edge .VTL2.Activated.c_on when true;
      edge .VTL2.Actuator.c_emrg when true;
      edge .VTL2.Actuator.c_green when true;
      edge .VTL2.Actuator.c_red when true;
      edge .VTL2.Actuator.c_redGreen when true;
      edge .VTL2.Actuator.c_redRed when true;
      edge .VTL3.Activated.c_off when true;
      edge .VTL3.Activated.c_on when true;
      edge .VTL3.Actuator.c_emrg when true;
      edge .VTL3.Actuator.c_green when true;
      edge .VTL3.Actuator.c_red when true;
      edge .VTL3.Actuator.c_redGreen when true;
      edge .VTL3.Actuator.c_redRed when true;
      edge .VTL4.Activated.c_off when true;
      edge .VTL4.Activated.c_on when true;
      edge .VTL4.Actuator.c_emrg when true;
      edge .VTL4.Actuator.c_green when true;
      edge .VTL4.Actuator.c_red when true;
      edge .VTL4.Actuator.c_redGreen when true;
      edge .VTL4.Actuator.c_redRed when true;
      edge .VTL5.Activated.c_off when true;
      edge .VTL5.Activated.c_on when true;
      edge .VTL5.Actuator.c_emrg when true;
      edge .VTL5.Actuator.c_green when true;
      edge .VTL5.Actuator.c_red when true;
      edge .VTL5.Actuator.c_redGreen when true;
      edge .VTL5.Actuator.c_redRed when true;
      edge .VTL6.Activated.c_off when true;
      edge .VTL6.Activated.c_on when true;
      edge .VTL6.Actuator.c_emrg when true;
      edge .VTL6.Actuator.c_green when true;
      edge .VTL6.Actuator.c_red when true;
      edge .VTL6.Actuator.c_redGreen when true;
      edge .VTL6.Actuator.c_redRed when true;
      edge .VTL7.Activated.c_off when true;
      edge .VTL7.Activated.c_on when true;
      edge .VTL7.Actuator.c_emrg when true;
      edge .VTL7.Actuator.c_green when true;
      edge .VTL7.Actuator.c_red when true;
      edge .VTL7.Actuator.c_redGreen when true;
      edge .VTL7.Actuator.c_redRed when true;
      edge .VTL8.Activated.c_off when true;
      edge .VTL8.Activated.c_on when true;
      edge .VTL8.Actuator.c_emrg when true;
      edge .VTL8.Actuator.c_green when true;
      edge .VTL8.Actuator.c_red when true;
      edge .VTL8.Actuator.c_redGreen when true;
      edge .VTL8.Actuator.c_redRed when true;
  end
end
